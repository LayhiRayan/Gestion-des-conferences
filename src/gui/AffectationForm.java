/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.Evenement;
import beans.Intervenant;
import beans.ParticipationEvenement;
import services.EvenementService;
import services.IntervenantService;
import services.ParticipationEvenementService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.util.List;

/**
 *
 * @author HP-PC
 */
public class AffectationForm extends javax.swing.JInternalFrame {
     private EvenementService evenementService;
    private IntervenantService intervenantService;
    private ParticipationEvenementService participationService;
    private DefaultTableModel model;
    private javax.swing.JList<Intervenant> listIntervenant;

    /**
     * Creates new form AffectationForm
     */
    public AffectationForm() {
        super("Affectation", true, true, true, true);
        initComponents();
        setTitle("Affectation des Intervenants");
       evenementService = new EvenementService();
    intervenantService = new IntervenantService();
    participationService = new ParticipationEvenementService();
    model = (DefaultTableModel) affectationJTable.getModel();
    setClosable(true);
    setIconifiable(true);
    setMaximizable(true);
    setResizable(true);
    listIntervenant = new JList<>(new DefaultListModel<>()); // ‚úÖ Initialisation manuelle AVANT d'utiliser loadIntervenants()
    
    loadEvenements();
    loadIntervenants();
    }
   
    private void loadEvenements() {
        listEvenement.removeAllItems();
        List<Evenement> evenements = evenementService.findAll();
        for (Evenement e : evenements) {
            listEvenement.addItem(e);
        }
        if (!evenements.isEmpty()) {
            loadAffectations();
        }
    }
    private void loadAffectations() {
    model.setRowCount(0);
    Evenement selectedEvent = (Evenement) listEvenement.getSelectedItem();
    if (selectedEvent == null) return;

    List<ParticipationEvenement> affectations = participationService.findByEvenement(selectedEvent);
    int counter = 1;
    for (ParticipationEvenement p : affectations) {
        model.addRow(new Object[] {
            counter++,
            p.getEvenement().getTitre(),
            p.getIntervenant().getNom() + " " + p.getIntervenant().getPrenom(),
            p.getIntervenant().getSpecialite()
        });
    }
}

   private void loadIntervenants() {
    List<Intervenant> intervenants = intervenantService.findAll(); // üîç R√©cup√©ration des intervenants
    DefaultListModel<String> model = new DefaultListModel<>();

    if (intervenants.isEmpty()) {
        System.out.println("‚ùå Aucun intervenant trouv√© !");
    }

    for (Intervenant i : intervenants) {
        String nomComplet = i.getNom() + " " + i.getPrenom() + " (" + i.getSpecialite() + ")";
        model.addElement(nomComplet);  // ‚úÖ Affichage plus clair dans la liste
    }

    ListIntervenant.setModel(model);  // ‚úÖ C‚Äôest la bonne JList de ton interface
 // ‚úÖ Appliquer le mod√®le √† la JList
}
public void setAlwaysOnTop(boolean value) {
    // Ne rien faire, ou afficher un log si tu veux
    System.out.println("‚ö†Ô∏è Ignor√© : setAlwaysOnTop() n'est pas support√© dans JInternalFrame.");
}




    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bnAdd = new javax.swing.JButton();
        bnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        listEvenement = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListIntervenant = new javax.swing.JList<>();
        bnUpdate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        affectationTable = new javax.swing.JScrollPane();
        affectationJTable = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Liste d'affectation", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(241, 243, 244));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Affectation des intervenants ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 12))); // NOI18N

        bnAdd.setBackground(new java.awt.Color(0, 200, 83));
        bnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/edit_add.png"))); // NOI18N
        bnAdd.setText("Ajouter");
        bnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnAddActionPerformed(evt);
            }
        });

        bnDelete.setBackground(new java.awt.Color(229, 57, 5));
        bnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/delete_user.png"))); // NOI18N
        bnDelete.setText("Supprimer");
        bnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/lists.png"))); // NOI18N
        jLabel1.setText("Les evenements :");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/list.png"))); // NOI18N
        jLabel2.setText("Les intervenants :");

        listEvenement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listEvenementActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(ListIntervenant);

        bnUpdate.setBackground(new java.awt.Color(251, 192, 45));
        bnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/agt_update_recommended.png"))); // NOI18N
        bnUpdate.setText("Modifier");
        bnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(bnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bnDelete)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listEvenement, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 249, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(184, 184, 184))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listEvenement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bnDelete)
                    .addComponent(bnUpdate)
                    .addComponent(bnAdd)))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Liste d'affectation", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 12))); // NOI18N

        affectationJTable.setForeground(new java.awt.Color(33, 33, 33));
        affectationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Evenement", "Participant", "Specialite"
            }
        ));
        affectationTable.setViewportView(affectationJTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(affectationTable, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(affectationTable, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listEvenementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listEvenementActionPerformed
 loadAffectations();
    }//GEN-LAST:event_listEvenementActionPerformed

    private void bnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnAddActionPerformed
Evenement selectedEvent = (Evenement) listEvenement.getSelectedItem();
    if (selectedEvent == null) {
        JOptionPane.showMessageDialog(this, "S√©lectionnez un √©v√©nement !");
        return;
    }

    List<String> selectedValues = ListIntervenant.getSelectedValuesList();
    if (selectedValues.isEmpty()) {
        JOptionPane.showMessageDialog(this, "S√©lectionnez au moins un intervenant !");
        return;
    }

    List<Intervenant> allIntervenants = intervenantService.findAll();

    for (String nomAffiche : selectedValues) {
        for (Intervenant i : allIntervenants) {
            String nomComplet = i.getNom() + " " + i.getPrenom() + " (" + i.getSpecialite() + ")";
            if (nomComplet.equals(nomAffiche)) {
                if (!participationService.exists(selectedEvent, i)) {
                    participationService.create(selectedEvent, i);
                } else {
                    System.out.println("‚ö†Ô∏è D√©j√† affect√© : " + nomComplet);
                }
                break;
            }
        }
    }

    loadAffectations(); // Rafra√Æchir le tableau
    JOptionPane.showMessageDialog(this, "Affectation termin√©e !");
    }//GEN-LAST:event_bnAddActionPerformed

    private void bnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnDeleteActionPerformed
        int selectedRow = affectationJTable.getSelectedRow();
if (selectedRow == -1) {
    JOptionPane.showMessageDialog(this, "Veuillez s√©lectionner une ligne !");
    return;
}

Evenement event = (Evenement) listEvenement.getSelectedItem();
String intervenantNomComplet = (String) model.getValueAt(selectedRow, 2);

// ‚úÖ Bo√Æte de confirmation
int confirmation = JOptionPane.showConfirmDialog(
        this,
        "Voulez-vous vraiment supprimer cette affectation ?",
        "Confirmation",
        JOptionPane.YES_NO_OPTION
);

if (confirmation != JOptionPane.YES_OPTION) {
    return; // ‚ùå L'utilisateur a annul√©
}

List<Intervenant> intervenants = intervenantService.findAll();
for (Intervenant i : intervenants) {
    String nomComplet = i.getNom() + " " + i.getPrenom();
    if (nomComplet.equalsIgnoreCase(intervenantNomComplet)) {
        participationService.delete(event, i);
        break;
    }
}

loadAffectations();
JOptionPane.showMessageDialog(this, "‚úÖ Affectation supprim√©e avec succ√®s !");
    }//GEN-LAST:event_bnDeleteActionPerformed

    private void bnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnUpdateActionPerformed
int selectedRow = affectationJTable.getSelectedRow();
if (selectedRow == -1) {
    JOptionPane.showMessageDialog(this, "Veuillez s√©lectionner une affectation √† modifier !");
    return;
}

DefaultTableModel model = (DefaultTableModel) affectationJTable.getModel();
Evenement event = (Evenement) listEvenement.getSelectedItem();
String oldNomComplet = (String) model.getValueAt(selectedRow, 2);

// üîç Trouver l'ancien intervenant
Intervenant oldIntervenant = null;
for (Intervenant i : intervenantService.findAll()) {
    String nomComplet = i.getNom() + " " + i.getPrenom();
    if (nomComplet.equalsIgnoreCase(oldNomComplet)) {
        oldIntervenant = i;
        break;
    }
}

if (oldIntervenant == null) {
    JOptionPane.showMessageDialog(this, "Intervenant introuvable !");
    return;
}

// üß† Choix du nouvel intervenant
List<Intervenant> intervenants = intervenantService.findAll();
Intervenant newIntervenant = (Intervenant) JOptionPane.showInputDialog(
        this,
        "Choisir le nouvel intervenant :",
        "Modification d'affectation",
        JOptionPane.QUESTION_MESSAGE,
        null,
        intervenants.toArray(),
        intervenants.get(0)
);

if (newIntervenant != null) {
    if (newIntervenant.equals(oldIntervenant)) {
        JOptionPane.showMessageDialog(this, "Aucun changement d√©tect√© !");
        return;
    }

    // ‚úÖ Confirmation
    int confirm = JOptionPane.showConfirmDialog(
            this,
            "Voulez-vous vraiment remplacer \"" + oldNomComplet + "\" par \"" +
                    newIntervenant.getNom() + " " + newIntervenant.getPrenom() + "\" ?",
            "Confirmation de modification",
            JOptionPane.YES_NO_OPTION
    );

    if (confirm != JOptionPane.YES_OPTION) return;

    // üîß Supprimer l‚Äôancienne participation
    boolean deleted = participationService.delete(event, oldIntervenant);
    if (!deleted) {
        JOptionPane.showMessageDialog(this, "√âchec lors de la suppression de l'ancien intervenant !");
        return;
    }

    // ‚úÖ Cr√©er la nouvelle participation
    participationService.create(event, newIntervenant);

    JOptionPane.showMessageDialog(this, "Affectation modifi√©e avec succ√®s !");
    loadAffectations();
}

    }//GEN-LAST:event_bnUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AffectationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AffectationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AffectationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AffectationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AffectationForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ListIntervenant;
    private javax.swing.JTable affectationJTable;
    private javax.swing.JScrollPane affectationTable;
    private javax.swing.JButton bnAdd;
    private javax.swing.JButton bnDelete;
    private javax.swing.JButton bnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox listEvenement;
    // End of variables declaration//GEN-END:variables


}
